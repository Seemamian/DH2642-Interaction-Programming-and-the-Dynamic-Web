{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/devUtils.ts","../src/buildUtils.ts","../src/plugin.ts"],"sourcesContent":["import VirtualHtml from './plugin'\nexport * from './buildUtils'\nexport * from './devUtils'\nexport * from './types'\nexport default VirtualHtml\nexport * from './plugin'\n","import glob from 'fast-glob'\nimport debug from 'debug'\nimport path from 'node:path'\nimport os from 'node:os'\n\nexport type PageObject = {\n  template: string,\n  data?: VirtualHtmlTemplateData,\n  render?: VirtualHtmlTemplateRender,\n}\n/**\n * describe a page\n */\nexport type VirtualHtmlPage = string | PageObject | VirtualPageOptions\n/**\n * html template render\n */\nexport type VirtualHtmlTemplateRender = (template: string, data: Record<string, any>) => string\n\nexport type VirtualHtmlTemplateData = Record<string, any>\n\nexport type Pages = { [key: string]: VirtualHtmlPage }\n\nexport type VirtualPageOptions = {\n  entry: string,\n  title?: string,\n  body?: string,\n}\n\nexport type HistoryRewrites = {\n  from: RegExp,\n  to: string,\n}\n\n/**\n * plugin config options\n */\nexport type PluginOptions = {\n  /**\n   * config html-entries' path\n   * if it is true, plugin will use glob to find all the html page in project to generate a json like {a: /src/a/a.html,}\n   */\n  pages?: Pages | true,\n  /**\n   * define the index page,to replace default index.html\n   * this page will trigger `transformIndexHtml` hook.\n   */\n  indexPage?: string,\n  /**\n   * use for template. as global inject data\n   */\n  data?: Record<string, unknown>\n  /**\n   * function to render template\n   */\n  render?: VirtualHtmlTemplateRender\n  /**\n   * when pages set to true, customize fast-glob's pattern\n   * default value is ['**\\\\*.html', '!node_modules\\\\**\\\\*.html', '!.**\\\\*.html']\n   */\n  extraGlobPattern?: Array<string>\n  /**\n   * inject code to html\n   * key: html name, can be *\n   */\n  injectCode?: Record<string, InjectCode>\n  /**\n   * option to connect-history-api-fallback's rewrites\n   */\n  rewrites?: Array<HistoryRewrites>\n}\n\n/**\n * inject code to tag's before or after\n */\nexport enum POS {\n  before,\n  after\n}\n\n/**\n * inject code config\n */\nexport type InjectCode = {\n  pos: POS,\n  find: string,\n  replacement: string,\n}\n\nexport const DEFAULT_INJECTCODE_ALL = '*'\n\nlet alreadyShowEjsError = false\n\n// noinspection JSUnusedLocalSymbols\nexport function defaultRender(template: string, data: Record<string, any>) {\n  try {\n    const resolved = require.resolve('ejs')\n    return require(resolved).render(template, data, {\n      delimiter: '%',\n      root: process.cwd()\n    })\n  } catch (e) {\n    // @ts-ignore\n    if (e.code === 'MODULE_NOT_FOUND') {\n      if (!alreadyShowEjsError) {\n        logger(`[vite-plugin-virtual-html]: Module 'ejs' is not found! If you want to use it, please install it. Otherwise please ignore this error!`)\n        alreadyShowEjsError = true\n      }\n    }\n  }\n  return template\n}\n\nexport const cwd = normalizePath(process.cwd())\n\nexport const VIRTUAL_HTML_CONTENT = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>#TITLE#</title>\n    <script src=\"#ENTRY#\" type=\"module\"></script>\n</head>\n<body>\n#BODY#\n</body>\n</html>\n`\n\nconst DEFAULT_GLOB_PATTERN = [\n  '**/*.html',\n  '!node_modules/**/*.html',\n  '!.**/*.html'\n]\n\nexport const logger = debug('vite-plugin-virtual-html')\n\n/**\n * find all html file in project and return it as Pages\n */\nexport function findAllHtmlInProject(extraGlobPattern: Array<string> = []): Pages {\n  const pages: Pages = {}\n  let realPattern = extraGlobPattern\n  if (extraGlobPattern.length === 0) {\n    realPattern = DEFAULT_GLOB_PATTERN\n  }\n  const files = glob.sync(realPattern)\n  files.forEach(file => {\n    const filePathArr = file.split('/')\n    pages[filePathArr[filePathArr.length - 1].replace('.html', '')] = `/${file}`\n  })\n  return pages\n}\n\n/**\n * directly use find\\replacement / replacement\\find to replace find\n * @param {pos, find, replacement}\n * @param code\n */\nexport function generateInjectCode({pos, find, replacement}: InjectCode, code: string): string {\n  if (pos === POS.after) {\n    return code.replace(find, `${find}\\n${replacement}`)\n  }\n  if (pos === POS.before) {\n    return code.replace(find, `\\n${replacement}\\n${find}`)\n  }\n  return code\n}\n\n/**\n * generate page from virtual page\n * @param vPages\n */\nexport async function generateVirtualPage(vPages: VirtualPageOptions): Promise<string> {\n  const {\n    entry,\n    title = '',\n    body= '<div id=\"app\"></div>'\n  } = vPages\n  return VIRTUAL_HTML_CONTENT.replace('#ENTRY#', entry).replace('#TITLE#', title).replace('#BODY#',body)\n}\n\n// sourcecode from vite\n// export const isWindows = os.platform() === 'win32'\n\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, '/')\n}\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(os.platform() === 'win32' ? slash(id) : id)\n}\n// end\n","// noinspection UnnecessaryLocalVariableJS\n\nimport {\n  cwd,\n  defaultRender,\n  PageObject,\n  VirtualHtmlTemplateData,\n  VirtualHtmlTemplateRender,\n} from './types'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport {logger} from \"./types\";\n\nconst fsp = fs.promises\n\n/**\n * generate URL\n * @param url\n */\nexport function generateUrl(url?: string): string {\n  if (!url) {\n    return '/'\n  }\n  // url with parameters\n  if (url.indexOf('?') > 0) {\n    return url.split('?')[0]\n  }\n  return url\n}\n\n/**\n * read HTML file from disk and generate code from template system(with render function)\n * @param template\n * @param data\n * @param render\n */\nexport async function readHtml({template = '', data = {}, render = defaultRender}: PageObject) {\n  const templatePath = path.resolve(cwd, `.${template}`)\n  if (!fs.existsSync(templatePath)) {\n      logger('[vite-plugin-virtual-html]: template file must exist!')\n    return ''\n  }\n  const htmlCode = await renderTemplate(templatePath, render, data)\n  return htmlCode\n}\n\n/**\n * render template\n * @param templatePath\n * @param render\n * @param data\n */\nexport async function renderTemplate(templatePath: string, render: VirtualHtmlTemplateRender, data: VirtualHtmlTemplateData) {\n  return await readTemplate(templatePath).then(code => {\n    const result = render(code, data)\n    return result\n  })\n}\n\n/**\n * read html file's content to render with render function\n * @param templatePath\n */\nexport async function readTemplate(templatePath: string): Promise<string> {\n  const result = await fsp.readFile(templatePath)\n  return result.toString()\n}\n\n/**\n * generate page option from string/object to object\n * @param page\n * @param globalData\n * @param globalRender\n */\nexport async function generatePageOptions(page: PageObject| string, globalData: Record<string, unknown>, globalRender: VirtualHtmlTemplateRender): Promise<PageObject> {\n  if (typeof page === 'string') {\n    return {\n      template: page,\n      data: {\n        ...globalData,\n      },\n      render: globalRender,\n    }\n  }\n  // todo\n  const {data = {}, render, template} = page\n  return {\n    template: template,\n    data: {\n      ...globalData,\n      ...data,\n    },\n    render: render ?? globalRender ?? defaultRender,\n  }\n}\n","import { cwd, VirtualHtmlPage, VirtualPageOptions } from './types'\nimport { normalizePath } from './types'\n\n/**\n * use pages' key as html name\n * @param pages\n */\nexport function extractHtmlPath(pages: { [p: string]: VirtualHtmlPage| VirtualPageOptions }) {\n  const newPages: { [key: string]: string } = {}\n  Object.keys(pages).forEach(key => {\n    newPages[key]=`/${key}.html`\n  })\n  return newPages\n}\n\n/**\n * get html file's name\n * @param id\n * @param root\n */\nexport function getHtmlName(id:string, root?:string){\n  const _root = (root ?? '').replace(cwd, '');\n  const _id = id.replace(cwd, '');\n  const result = _id.substring(0, _id.length - '.html'.length).replace(_root !== '' ? addTrailingSlash(_root) : '', '');\n  return result.startsWith('/') ? result.substring(1) : result;\n\n}\n\n/**\n * add trailing slash on path\n * @param {string} path\n * @returns {string}\n */\nexport function addTrailingSlash(path:string):string {\n  const _path = normalizePath(path.replace(cwd, ''));\n  return _path.endsWith('/') ? _path : `${_path}/`;\n}\n","// noinspection UnnecessaryLocalVariableJS,JSUnusedGlobalSymbols\n// noinspection JSUnusedGlobalSymbols\n\nimport type { Plugin, UserConfig, ViteDevServer } from 'vite'\nimport {\n  cwd,\n  DEFAULT_INJECTCODE_ALL,\n  defaultRender, HistoryRewrites,\n  Pages,\n  PluginOptions,\n  VirtualHtmlPage,\n  VirtualPageOptions,\n} from './types'\nimport { generatePageOptions, generateUrl, readHtml } from './devUtils'\nimport { addTrailingSlash, extractHtmlPath, getHtmlName } from './buildUtils'\nimport path from 'path'\nimport fs, { promises as fsp } from 'fs'\nimport { findAllHtmlInProject, generateInjectCode, generateVirtualPage, logger, normalizePath, } from './types'\nimport history from 'connect-history-api-fallback'\nimport type { Connect } from 'vite'\n\nexport default (virtualHtmlOptions: PluginOptions): Plugin => {\n  const {\n    pages: pagesObj,\n    indexPage = 'index',\n    render: globalRender = defaultRender,\n    data: globalData = {},\n    extraGlobPattern = [],\n    injectCode = {},\n    rewrites,\n  } = virtualHtmlOptions\n  let pages: Pages\n  if (pagesObj === true || pagesObj === undefined) {\n    pages = findAllHtmlInProject(extraGlobPattern)\n  } else {\n    pages = pagesObj\n  }\n  let _config: UserConfig\n  let distDir: string\n  const needRemove: Array<string> = []\n  const plugin = {\n    name: 'vite-plugin-virtual-html',\n    configureServer(server: ViteDevServer) {\n      if (rewrites) {\n        buildHistoryApiFallback(server,rewrites)\n      }\n      // other html handled after vite's inner middlewares.\n      return () => {\n        server.middlewares.use('/', async (req, res, next) => {\n          let url = decodeURI(generateUrl(req.url))\n          // if request is not html , directly return next()\n          if (!url.endsWith('.html') && url !== '/') {\n            return next()\n          }\n          // if request / means it request indexPage htmlCode\n          // read indexPage config ,and response indexPage htmlCode\n          let htmlCode: string\n          if (url === '/' || url.indexOf('index.html') >= 0) {\n            url = `/${indexPage}.html`\n            // @ts-ignore\n            htmlCode = await plugin.load(normalizePath(url)) ?? ''\n          } else {\n            // @ts-ignore\n            htmlCode = await plugin.load(url) ?? ''\n          }\n          // @ts-ignore\n          const transformResult = await plugin.transform(htmlCode, url)\n          if (transformResult === null) {\n            return next()\n          }\n          res.end(await server.transformIndexHtml(url, transformResult))\n          next()\n        })\n      }\n    },\n    async transform(code: string, id: string): Promise<string|null> {\n      if (id.indexOf('.html') >= 0) {\n        const ids = id.split('/')\n        const key = ids[ids.length - 1]\n        if (key in injectCode) {\n          return generateInjectCode(injectCode[key], code)\n        }\n        if (DEFAULT_INJECTCODE_ALL in injectCode) {\n          return generateInjectCode(injectCode[DEFAULT_INJECTCODE_ALL], code)\n        }\n        return code\n      }\n      return null\n    },\n    // @ts-ignore\n    async config(config, {command}) {\n      _config = config\n      if (command === 'build') {\n        for (let i = 0; i < Object.keys(pages).length; i++){\n          const key = Object.keys(pages)[i]\n          const pageOption = pages[key]\n          const vHtml = normalizePath(path.resolve(cwd, `./${config.root ? addTrailingSlash(config.root) : ''}${key}.html`))\n          if (!fs.existsSync(vHtml)) {\n            needRemove.push(vHtml)\n            await checkVirtualPath(vHtml, needRemove)\n            if (typeof pageOption === 'string' || 'template' in pageOption) {\n              const genPageOption = await generatePageOptions(pageOption, globalData, globalRender)\n              await fsp.copyFile(path.resolve(cwd, `.${genPageOption.template}`), vHtml)\n            }\n            if (typeof pageOption !== 'string' && 'entry' in pageOption) {\n              await fsp.writeFile(path.resolve(cwd, vHtml), await generateVirtualPage(pageOption))\n            }\n          }\n        }\n          logger('[vite-plugin-virtual-html]: This plugin cannot use in library mode!')\n        // get custom distDir config,if it is undefined use default config 'dist'\n        distDir = config.build?.outDir ?? 'dist'\n        // inject build.rollupOptions.input from pages directly.\n        config.build = {\n          ...config.build,\n          rollupOptions: {\n            ...config.build?.rollupOptions,\n            input: {\n              ...(config.build?.rollupOptions?.input as object),\n              ...extractHtmlPath(pages),\n            },\n          },\n        }\n      }\n    },\n    async load(id: string) {\n      if (id.endsWith('html')) {\n        const newId = getHtmlName(id, _config?.root)\n        const pageOption: VirtualHtmlPage | VirtualPageOptions = pages[newId]\n        if (pageOption !== undefined) {\n          // string\n          if (typeof pageOption === 'string') {\n            const page = await generatePageOptions(pageOption, globalData, globalRender)\n            // generate html template\n            return await readHtml(page)\n          }\n          // PageObject\n          if ('template' in pageOption) {\n            const page = await generatePageOptions(pageOption, globalData, globalRender)\n            // generate html template\n            return await readHtml(page)\n          }\n          // VirtualPageOptions\n          if ('entry' in pageOption) {\n            return await generateVirtualPage(pageOption)\n          }\n        }\n      }\n      return null\n    },\n    async closeBundle() {\n      // remove files should not be under project root\n      for (let vHtml of needRemove) {\n        if (fs.existsSync(vHtml)) {\n          await fsp.rm(vHtml, {\n            recursive: true,\n          }).catch(() => {\n            // ignore this warning\n          })\n        }\n      }\n    },\n  }\n  return plugin\n}\n\nexport const historyApiFallbackPlugin = (virtualHtmlOptions: PluginOptions):Plugin=>{\n  const {rewrites} = virtualHtmlOptions\n  return {\n    name: 'vite-plugin-virtual-html:history',\n    configureServer(server: ViteDevServer) {\n      if (rewrites) {\n        buildHistoryApiFallback(server,rewrites)\n      }\n    },\n  }\n}\n\n/**\n * build a server\n * @param server\n * @param rewrites\n */\nexport function buildHistoryApiFallback(server:ViteDevServer, rewrites:Array<HistoryRewrites>){\n  server.middlewares.use(history({\n    disableDotRule: undefined,\n    htmlAcceptHeaders: [\n      'text/html',\n      'application/xhtml+xml'\n    ],\n    rewrites: rewrites,\n  }) as Connect.NextHandleFunction)\n}\n\n/**\n * check html file's parent directory\n * @param html\n * @param needRemove\n */\nasync function checkVirtualPath(html: string, needRemove: Array<string>) {\n  const pathArr = html.split('/')\n  const fileName = pathArr[pathArr.length - 1]\n  const middlePath = html.replace(fileName, '').replace(cwd, '')\n  const firstPath = middlePath.split('/')[1]\n  if (!fs.existsSync(middlePath)) {\n    needRemove.push(normalizePath(path.resolve(cwd, `./${firstPath}`)))\n    await fsp.mkdir(path.resolve(cwd, `./${middlePath}`), {\n      recursive: true\n    })\n  }\n}\n"],"mappings":"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","names":["POS","debug","glob","path","os","path","path","path","fs","fsp","history"]}