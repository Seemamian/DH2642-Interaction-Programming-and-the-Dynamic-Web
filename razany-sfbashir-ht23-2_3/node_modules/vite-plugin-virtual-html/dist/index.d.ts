import { Plugin, ViteDevServer } from 'vite';
import debug from 'debug';

declare type PageObject = {
    template: string;
    data?: VirtualHtmlTemplateData;
    render?: VirtualHtmlTemplateRender;
};
/**
 * describe a page
 */
declare type VirtualHtmlPage = string | PageObject | VirtualPageOptions;
/**
 * html template render
 */
declare type VirtualHtmlTemplateRender = (template: string, data: Record<string, any>) => string;
declare type VirtualHtmlTemplateData = Record<string, any>;
declare type Pages = {
    [key: string]: VirtualHtmlPage;
};
declare type VirtualPageOptions = {
    entry: string;
    title?: string;
    body?: string;
};
declare type HistoryRewrites = {
    from: RegExp;
    to: string;
};
/**
 * plugin config options
 */
declare type PluginOptions = {
    /**
     * config html-entries' path
     * if it is true, plugin will use glob to find all the html page in project to generate a json like {a: /src/a/a.html,}
     */
    pages?: Pages | true;
    /**
     * define the index page,to replace default index.html
     * this page will trigger `transformIndexHtml` hook.
     */
    indexPage?: string;
    /**
     * use for template. as global inject data
     */
    data?: Record<string, unknown>;
    /**
     * function to render template
     */
    render?: VirtualHtmlTemplateRender;
    /**
     * when pages set to true, customize fast-glob's pattern
     * default value is ['**\\*.html', '!node_modules\\**\\*.html', '!.**\\*.html']
     */
    extraGlobPattern?: Array<string>;
    /**
     * inject code to html
     * key: html name, can be *
     */
    injectCode?: Record<string, InjectCode>;
    /**
     * option to connect-history-api-fallback's rewrites
     */
    rewrites?: Array<HistoryRewrites>;
};
/**
 * inject code to tag's before or after
 */
declare enum POS {
    before = 0,
    after = 1
}
/**
 * inject code config
 */
declare type InjectCode = {
    pos: POS;
    find: string;
    replacement: string;
};
declare const DEFAULT_INJECTCODE_ALL = "*";
declare function defaultRender(template: string, data: Record<string, any>): any;
declare const cwd: string;
declare const VIRTUAL_HTML_CONTENT = "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>#TITLE#</title>\n    <script src=\"#ENTRY#\" type=\"module\"></script>\n</head>\n<body>\n#BODY#\n</body>\n</html>\n";
declare const logger: debug.Debugger;
/**
 * find all html file in project and return it as Pages
 */
declare function findAllHtmlInProject(extraGlobPattern?: Array<string>): Pages;
/**
 * directly use find\replacement / replacement\find to replace find
 * @param {pos, find, replacement}
 * @param code
 */
declare function generateInjectCode({ pos, find, replacement }: InjectCode, code: string): string;
/**
 * generate page from virtual page
 * @param vPages
 */
declare function generateVirtualPage(vPages: VirtualPageOptions): Promise<string>;
declare function slash(p: string): string;
declare function normalizePath(id: string): string;

declare const _default: (virtualHtmlOptions: PluginOptions) => Plugin;

declare const historyApiFallbackPlugin: (virtualHtmlOptions: PluginOptions) => Plugin;
/**
 * build a server
 * @param server
 * @param rewrites
 */
declare function buildHistoryApiFallback(server: ViteDevServer, rewrites: Array<HistoryRewrites>): void;

/**
 * use pages' key as html name
 * @param pages
 */
declare function extractHtmlPath(pages: {
    [p: string]: VirtualHtmlPage | VirtualPageOptions;
}): {
    [key: string]: string;
};
/**
 * get html file's name
 * @param id
 * @param root
 */
declare function getHtmlName(id: string, root?: string): string;
/**
 * add trailing slash on path
 * @param {string} path
 * @returns {string}
 */
declare function addTrailingSlash(path: string): string;

/**
 * generate URL
 * @param url
 */
declare function generateUrl(url?: string): string;
/**
 * read HTML file from disk and generate code from template system(with render function)
 * @param template
 * @param data
 * @param render
 */
declare function readHtml({ template, data, render }: PageObject): Promise<string>;
/**
 * render template
 * @param templatePath
 * @param render
 * @param data
 */
declare function renderTemplate(templatePath: string, render: VirtualHtmlTemplateRender, data: VirtualHtmlTemplateData): Promise<string>;
/**
 * read html file's content to render with render function
 * @param templatePath
 */
declare function readTemplate(templatePath: string): Promise<string>;
/**
 * generate page option from string/object to object
 * @param page
 * @param globalData
 * @param globalRender
 */
declare function generatePageOptions(page: PageObject | string, globalData: Record<string, unknown>, globalRender: VirtualHtmlTemplateRender): Promise<PageObject>;

export { DEFAULT_INJECTCODE_ALL, HistoryRewrites, InjectCode, POS, PageObject, Pages, PluginOptions, VIRTUAL_HTML_CONTENT, VirtualHtmlPage, VirtualHtmlTemplateData, VirtualHtmlTemplateRender, VirtualPageOptions, addTrailingSlash, buildHistoryApiFallback, cwd, _default as default, defaultRender, extractHtmlPath, findAllHtmlInProject, generateInjectCode, generatePageOptions, generateUrl, generateVirtualPage, getHtmlName, historyApiFallbackPlugin, logger, normalizePath, readHtml, readTemplate, renderTemplate, slash };
